name: Build & Commit Bank.db

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-db:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Show Python version
        run: python -V

      - name: Create schema
        run: python createDB.py

      - name: Insert sample data
        run: python InsertData.py

      - name: Place DB at repo root
        run: |
          if [ -f "bank.db" ]; then
            mv -f bank.db Bank.db
          elif [ -f "db/Bank.db" ]; then
            mv -f db/Bank.db Bank.db
          elif [ -f "Bank.db" ]; then
            echo "Bank.db already at repo root."
          else
            echo "No DB file found after scripts ran!" && ls -la && exit 1
          fi

      # Build a single-page Markdown view: Bank.md (Mermaid ER + tables)
      - name: Export Bank.md (ER diagram + tables)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y sqlite3

          # Header + Mermaid ER (use printf to avoid heredoc/indent pitfalls)
          printf '%s\n' \
            '# Bank — Logical View' '' '## ER Diagram' '```mermaid' \
            'erDiagram' \
            '  Customers ||--o{ Accounts : has' \
            '  Accounts  ||--o{ Transactions : records' \
            '' \
            '  Customers {' \
            '    INTEGER cust_id PK' \
            '    TEXT    name' \
            '    TEXT    address' \
            '    TEXT    email' \
            '  }' \
            '' \
            '  Accounts {' \
            '    INTEGER acc_id PK' \
            '    INTEGER cust_id FK' \
            '    TEXT    acc_type' \
            '    REAL    balance' \
            '  }' \
            '' \
            '  Transactions {' \
            '    INTEGER trans_id PK' \
            '    INTEGER acc_id  FK' \
            '    TEXT    trans_type' \
            '    REAL    amount' \
            '    TEXT    date' \
            '  }' \
            '```' '' '## Tables' > Bank.md

          { echo ""; echo "### Customers";
            sqlite3 -markdown Bank.db -cmd ".headers on" "SELECT * FROM Customers;";
          } >> Bank.md

          { echo ""; echo "### Accounts (with owner)";
            sqlite3 -markdown Bank.db -cmd ".headers on" \
              "SELECT a.acc_id, c.name AS owner, a.acc_type, a.balance
               FROM Accounts a
               JOIN Customers c ON a.cust_id = c.cust_id
               ORDER BY a.acc_id;";
          } >> Bank.md

          { echo ""; echo "### Transactions";
            sqlite3 -markdown Bank.db -cmd ".headers on" \
              "SELECT * FROM Transactions ORDER BY trans_id;";
          } >> Bank.md

      # Build README.md that embeds Bank.md content (so ER+tables appear on repo home)
      - name: Build README.md (intro + structure + flow + embed Bank.md)
        run: |
          # Intro (no heredoc)
          printf '%s\n' \
            '# Bank Account Database (Python + SQLite)' '' \
            'This project builds a simple **bank** database in SQLite using Python,' \
            'seeds sample data, and publishes both the DB file and a readable Markdown view.' '' \
            '- **Database file**: [Bank.db](./Bank.db)' \
            '- The full logical view (ER diagram + tables) is embedded below.' '' \
            '## Quick start (local)' \
            '```bash' \
            'python createDB.py      # create tables' \
            'python InsertData.py    # insert sample data' \
            'python Queries.py       # print reports to the console' \
            '```' '' \
            '> Requires Python 3.x. No third-party packages are needed (uses the stdlib `sqlite3`).' \
            '' \
            '---' \
          > README.md

          # Project structure
          printf '%s\n' \
            '' '## Project structure' \
            '```text' \
            '.' \
            '├── Bank.db                      # generated SQLite database (built by CI)' \
            '├── Bank.md                      # ER diagram + tables (built by CI)' \
            '├── createDB.py                  # creates schema (tables)' \
            '├── InsertData.py                # inserts sample data' \
            '├── Queries.py                   # simple SELECT queries (prints to console)' \
            '└── .github/' \
            '    └── workflows/' \
            '        └── build-and-commit-db.yml   # CI: builds Bank.db & Bank.md and updates README.md' \
            '```' \
          >> README.md

          # Execution flow (Mermaid)
          printf '%s\n' \
            '' '## Execution flow' \
            '```mermaid' \
            'flowchart TD' \
            '    A[createDB.py<br/>create tables] --> B[InsertData.py<br/>insert rows]' \
            '    A -->|creates| D[(bank.db)]' \
            '    B -->|updates| D[(bank.db)]' \
            '    D -->|export via CI| E[Bank.md<br/>ER + tables]' \
            '    E -->|embedded| R[README.md]' \
            '    C[Queries.py<br/>print reports] --> D' \
            '```' \
          >> README.md

          # Append the full Bank.md so the ER+tables appear in README.md
          cat Bank.md >> README.md

      - name: Commit DB and docs if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin "$(git branch --show-current)" || true

          git add Bank.db Bank.md README.md
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Build: update Bank.db and embed ER+tables in README.md"
            git push origin "$(git branch --show-current)"
          fi
